# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Simulation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, parameters: str=None, parent_experiment_id: int=None, state: int=None, inner_time: int=None, exit_code: int=None):
        """
        Simulation - a model defined in Swagger

        :param id: The id of this Simulation.
        :type id: int
        :param parameters: The parameters of this Simulation.
        :type parameters: str
        :param parent_experiment_id: The parent_experiment_id of this Simulation.
        :type parent_experiment_id: int
        :param state: The state of this Simulation.
        :type state: int
        :param inner_time: The inner_time of this Simulation.
        :type inner_time: int
        :param exit_code: The exit_code of this Simulation.
        :type exit_code: int
        """
        self.swagger_types = {
            'id': int,
            'parameters': str,
            'parent_experiment_id': int,
            'state': int,
            'inner_time': int,
            'exit_code': int
        }

        self.attribute_map = {
            'id': 'id',
            'parameters': 'parameters',
            'parent_experiment_id': 'parentExperimentId',
            'state': 'state',
            'inner_time': 'inner_time',
            'exit_code': 'exit_code'
        }

        self._id = id
        self._parameters = parameters
        self._parent_experiment_id = parent_experiment_id
        self._state = state
        self._inner_time = inner_time
        self._exit_code = exit_code

    @classmethod
    def from_dict(cls, dikt) -> 'Simulation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Simulation of this Simulation.
        :rtype: Simulation
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Simulation.

        :return: The id of this Simulation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Simulation.

        :param id: The id of this Simulation.
        :type id: int
        """

        self._id = id

    @property
    def parameters(self) -> str:
        """
        Gets the parameters of this Simulation.
        Значения переменных параметров в этой симуляции в фрмате json {var1:[1,2,3],var2:[0.1,0.3] и т.п.}

        :return: The parameters of this Simulation.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: str):
        """
        Sets the parameters of this Simulation.
        Значения переменных параметров в этой симуляции в фрмате json {var1:[1,2,3],var2:[0.1,0.3] и т.п.}

        :param parameters: The parameters of this Simulation.
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def parent_experiment_id(self) -> int:
        """
        Gets the parent_experiment_id of this Simulation.
        id эксперимента, которому принадлежит эта симулция

        :return: The parent_experiment_id of this Simulation.
        :rtype: int
        """
        return self._parent_experiment_id

    @parent_experiment_id.setter
    def parent_experiment_id(self, parent_experiment_id: int):
        """
        Sets the parent_experiment_id of this Simulation.
        id эксперимента, которому принадлежит эта симулция

        :param parent_experiment_id: The parent_experiment_id of this Simulation.
        :type parent_experiment_id: int
        """

        self._parent_experiment_id = parent_experiment_id

    @property
    def state(self) -> int:
        """
        Gets the state of this Simulation.
        Запущено|В очереди|Завершено успешно|Завершено с ошибкой

        :return: The state of this Simulation.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state: int):
        """
        Sets the state of this Simulation.
        Запущено|В очереди|Завершено успешно|Завершено с ошибкой

        :param state: The state of this Simulation.
        :type state: int
        """

        self._state = state

    @property
    def inner_time(self) -> int:
        """
        Gets the inner_time of this Simulation.
        Текущее внетреннее время симуляции

        :return: The inner_time of this Simulation.
        :rtype: int
        """
        return self._inner_time

    @inner_time.setter
    def inner_time(self, inner_time: int):
        """
        Sets the inner_time of this Simulation.
        Текущее внетреннее время симуляции

        :param inner_time: The inner_time of this Simulation.
        :type inner_time: int
        """

        self._inner_time = inner_time

    @property
    def exit_code(self) -> int:
        """
        Gets the exit_code of this Simulation.
        если симуляция завершилась с ошибкой - код ошибки. Потом придумать как реализовать получение кода.

        :return: The exit_code of this Simulation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code: int):
        """
        Sets the exit_code of this Simulation.
        если симуляция завершилась с ошибкой - код ошибки. Потом придумать как реализовать получение кода.

        :param exit_code: The exit_code of this Simulation.
        :type exit_code: int
        """

        self._exit_code = exit_code

